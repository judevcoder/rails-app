continue
params[:transaction_property_id]
continue
params[:transaction_property_id]
continue
(a+b+c).uniq.length
(a+b+c).uniq.select!{|item| item.has_purchased_properties?}
continue
(a+b+c).uniq.select!{|item| item.has_purchased_properites?}
          |item| item.has_purchased_properties?
        .select! {
(a+b+c).uniq
          |item| item.has_purchased_properties?
        .select! {
(a+b+c).uniq
   258:           |item| item.has_purchased_properties?
   257:         .select! {
(a+b+c).uniq
continue
(a+b+c).uniq.length > 0
(a+b+c).uniq.length
continue
(a+b+c).uniq.count
(a+b+c).uniq.length
(a+b+c).uniq
continue
(a+b+c).uniq.count
(a+b+c).uniq.length
(a+b+c).uniq
continue
a
continue
[2,3] + (5..100).to_a
continue
t1.save
t1.transaction_main_id
t.relinquishing_seller_entity_id
@transaction_main.id
t
t1.save
t1
continue
t1
continue
@transaction
@transaction_main
e
e.message
continue
e
e.message
continue
t1.save
t1
@transaction
@transaction_main
continue
property_params[:property_id]
property_parmas[:property_id]
property_params
continue
transaction_property_params[:transaction_properties_attributes]
transaction_property_params[:transaction_properties_attributes].to_array
transaction_property_params[:transaction_properties_attributes].to_json[0]
transaction_property_params[:transaction_properties_attributes].to_json
property_params["property_id"]transaction_property_params[:transaction_properties_attributes]
property_params["property_id"]
property_params["0".to_sym]
property_params[0]
property_params["0"]
transaction_property_params[:transaction_properties_attributes]
property_params
property_params[:property_id]
continue
transaction_property_params[:transaction_properties_attributes]
transaction_property_params.transaction_properties_attributes
transaction_property_params
property_params["transaction_properties_attributes"]
property_params["id"]
property_params["property_id"]
property_params
property_params["transaction_properties_attributes"]["property_id"]
property_params["property_id"]
property_params.property_id
property_params["transaction_properties_attributes"]
property_params[:transaction_properties_attributes]
property_params[:property_id]
property_params
continue
e.message
continue
params[:identification_rule]
continue
e.message
continue
@cur_transaction_property
continue
@cur_transaction_property
continue
e.message
continue
e.message
continue
@transaction_property_offer.class
@transaction_property_offer
continue
@transaction_property_offer.class
@transaction_property_offer
continue
e.message
continue
e.message
continue
params[:cur_property]
params[:basket_id]
continue
params[:initial_asking_price]["#{transaction_property.property_id}".to_sym]
params[:initial_asking_price]["#{transaction_property.property_id}"
params[:initial_asking_price]["#{transaction_property.property_id}".to_sym] == 1
continue
params[:initial_asking_price]["#{transaction_property.property_id}".to_sym]
@basket_properties.include?
continue
e.message
continue
@transaction.transaction_properties.count
transaction_property.id
@transaction.transaction_properties
e.message
continue
params[:basket_id]
continue
@basket_properties.include? transaction_property.property_id
continue
transaction_property.property_id
continue
basket
@basket_properties
continue
contiue
continue
e.message
continue
trans_main_id
cur_step
property_id
exit
continue
transaction_property.sale_price
transaction_property.property.title
continue
transaction_property.sale_price
transaction_property.property.title
continue
transaction_basket.nil?
!transaction_basket.nil?
basket_properties
continue
transaction_basket.transaction_basket_properties.pluck(:property_id)
transaction_basket.transaction_basket_properties
continue
transaction_basket.transaction_basket_properties.pluck(:property_id)
transaction_basket.transaction_basket_properties.length
transaction_basket.transaction_basket_properties
transaction_basket.id
transaction_basket.nil?
continue
e
continue
@transactions.where.not('transactions.id in ()').count
@transactions.where.not('transactions.id in (?)', []).count
@transactions.where.not('transactions.id in (?)', del_transaction_ids).count
@transactions.where.not('transactions.id in (?)', del_transaction_ids)
@transactions.count
@transactions
continue
transaction_property_params
continue
Counteroffer.find(accepted_offer.accepted_counteroffer_id).try(:offered_price)
Counteroffer.find(95).offered_price.to_f(2)
Counteroffer.find(95).offered_price.to_f
Counteroffer.find(95).offered_price
Counteroffer.find(id: accepted_offer.accepted_counteroffer_id).offered_price
Counteroffer.find(accepted_offer.accepted_counteroffer_id).offered_price
Counteroffer.find(accepted_offer.accepted_counteroffer_id).try(:offered_price)
accepted_offer.accepted_counteroffer_id
accepted_offer.present?
continue
tran_prop_id
@transaction.transaction_properties.first.property_id
@transaction.transaction_properties.count
@transaction.transaction_properties
continue
params[:property_id]
tran_prop_id
@transaction.transaction_properties.where(property_id: tran_prop_id).count
continue
"#{self.first_name} #{self.last_name}"
company_name.nil?
continue
@property.property_offers.each do |f| f.id end
@property.property_offers.each do |f| f.offer_name end
@property.property_offers.each do |f|
@property.property_offers.count
@property.property_offers
continue
@property.property_offers.present?
@property.property_offers.empty?
@property.property_offers.blank?
@property.property_offers.length
@property.property_offers.present?
!@property.property_offers.present?
@property
continue
@property.property_offers.present?
@property.property_offers.blank?
@property
continue
transaction_property_ids
continue
transaction_property_ids
continue
Property.where(id: transaction_property_ids).order(created_at: :desc)
transaction_property_ids
continue
TransactionProperty.where(transaction_main_id: trans_main_id, is_sale: is_sale).pluck(:property_id)
transaction_property_ids
continue
transaction_property_ids
Property.where(id: transaction_property_ids).order(created_at: :desc)
TransactionProperty.where(transaction_main_id: trans_main_id, is_sale: is_sale).pluck(:property_id) 
continue
properties.present?
properties
continue
properties
continue
properties.length
count(properties)
properties.nil?
properties
continue
properties.select('id')
properties.id
properties.empty?
properties.present?
continue
@transaction.get_sale_purchase_text
