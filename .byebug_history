continue
@transactions.where.not('transactions.id in ()').count
@transactions.where.not('transactions.id in (?)', []).count
@transactions.where.not('transactions.id in (?)', del_transaction_ids).count
@transactions.where.not('transactions.id in (?)', del_transaction_ids)
@transactions.count
@transactions
continue
transaction_property_params
continue
Counteroffer.find(accepted_offer.accepted_counteroffer_id).try(:offered_price)
Counteroffer.find(95).offered_price.to_f(2)
Counteroffer.find(95).offered_price.to_f
Counteroffer.find(95).offered_price
Counteroffer.find(id: accepted_offer.accepted_counteroffer_id).offered_price
Counteroffer.find(accepted_offer.accepted_counteroffer_id).offered_price
Counteroffer.find(accepted_offer.accepted_counteroffer_id).try(:offered_price)
accepted_offer.accepted_counteroffer_id
accepted_offer.present?
continue
tran_prop_id
@transaction.transaction_properties.first.property_id
@transaction.transaction_properties.count
@transaction.transaction_properties
continue
params[:property_id]
tran_prop_id
@transaction.transaction_properties.where(property_id: tran_prop_id).count
continue
"#{self.first_name} #{self.last_name}"
company_name.nil?
continue
@property.property_offers.each do |f| f.id end
@property.property_offers.each do |f| f.offer_name end
@property.property_offers.each do |f|
@property.property_offers.count
@property.property_offers
continue
@property.property_offers.present?
@property.property_offers.empty?
@property.property_offers.blank?
@property.property_offers.length
@property.property_offers.present?
!@property.property_offers.present?
@property
continue
@property.property_offers.present?
@property.property_offers.blank?
@property
continue
transaction_property_ids
continue
transaction_property_ids
continue
Property.where(id: transaction_property_ids).order(created_at: :desc)
transaction_property_ids
continue
TransactionProperty.where(transaction_main_id: trans_main_id, is_sale: is_sale).pluck(:property_id)
transaction_property_ids
continue
transaction_property_ids
Property.where(id: transaction_property_ids).order(created_at: :desc)
TransactionProperty.where(transaction_main_id: trans_main_id, is_sale: is_sale).pluck(:property_id) 
continue
properties.present?
properties
continue
properties
continue
properties.length
count(properties)
properties.nil?
properties
continue
properties.select('id')
properties.id
properties.empty?
properties.present?
continue
@transaction.get_sale_purchase_text
